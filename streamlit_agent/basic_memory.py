from langchain_community.chat_message_histories import StreamlitChatMessageHistory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_community.chat_models import ChatYandexGPT

import streamlit as st

st.set_page_config(page_title="StreamlitChatMessageHistory", page_icon="üìñ")
st.title("üìñ StreamlitChatMessageHistory")

"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è StreamlitChatMessageHistory, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å LLMChain –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ. 
–ü—Ä–∏–º–µ—Ä –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å YandexGPT
–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
–Ω–∏–∂–µ. [–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ](https://github.com/dzhechko/streamlit-agent/edit/main/streamlit_agent/basic_memory.py).
"""

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏
msgs = StreamlitChatMessageHistory(key="langchain_messages")
if len(msgs.messages) == 0:
    msgs.add_ai_message("–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?")

view_messages = st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")

# folder_id = st.secrets["yagpt_folder_id"]
# api_id = st.secrets["yagpt_api_id"]
# api_key = st.secrets["yagpt_api_key"]

# –ü–æ–ª—É—á–µ–Ω–∏–µ folder id
if "YC_FOLDER_ID" in st.secrets:
    yagpt_folder_id = st.secrets.YC_FOLDER_ID
else:
    yagpt_folder_id = st.sidebar.text_input("YC folder ID", type="password")
if not yagpt_folder_id:
    st.info("–í–≤–µ–¥–∏—Ç–µ YaGPT folder ID –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ YaGPT API
if "YC_API_KEY" in st.secrets:
    yagpt_api_key = st.secrets.YC_API_KEY
else:
    yagpt_api_key = st.sidebar.text_input("YaGPT API Key", type="password")
if not yagpt_api_key:
    st.info("–í–≤–µ–¥–∏—Ç–µ YaGPT API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    st.stop()
    
# st.info(yagpt_api_key)
# st.info(yagpt_folder_id)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º LangChain, –ø–µ—Ä–µ–¥–∞–≤–∞—è Message History
prompt = ChatPromptTemplate.from_messages(
    [
        ("system", "–¢—ã –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π —á–∞—Ç-–±–æ—Ç. –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥–µ—Ç –∫—Ä–∞—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π 30 —Å–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ."),
        MessagesPlaceholder(variable_name="history"),
        ("human", "{question}"),
    ]
)

model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt/latest"
# model_uri = "gpt://"+str(yagpt_folder_id)+"/yandexgpt-lite/latest"
model = ChatYandexGPT(api_key=yagpt_api_key, model_uri=model_uri, temperature = 0.6)

chain = prompt | model
chain_with_history = RunnableWithMessageHistory(
    chain,
    lambda session_id: msgs,
    input_messages_key="question",
    history_messages_key="history",
)

# –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ StreamlitChatMessageHistory
for msg in msgs.messages:
    st.chat_message(msg.type).write(msg.content)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
if prompt := st.chat_input():
    st.chat_message("human").write(prompt)
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    config = {"configurable": {"session_id": "any"}}
    response = chain_with_history.invoke({"question": prompt}, config)
    st.chat_message("ai").write(response.content)

# –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –≤–Ω–æ–≤—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å —Å—Ä–∞–∑—É
with view_messages:
    """
    –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é:
    ```python
    msgs = StreamlitChatMessageHistory(key="langchain_messages")
    ```

    –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ `st.session_state.langchain_messages`:
    """
    view_messages.json(st.session_state.langchain_messages)
